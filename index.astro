<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>OKLCH Color Picker</title>
</head>

<style>
    :global(body) {
        display: grid;
        place-items: center;
        margin: 0;
        min-height: 100vh
    }
    lch-controls {
        display: grid;
        grid-template-columns: min-content 1fr;
        width: 20rem;
    }
    ch-canvas {
        width : 20rem;
        height: 20rem;
    }
    canvas {
        width : 100%;
        height: 100%;
        outline-color: black;
        outline-width: 1px;
        outline-style: solid;
    }
</style>

<script>
    import { controller, target } from 'https://esm.sh/v106/@github/catalyst@1.6.0/es2022/catalyst.development.js'
    import OKLCH, { LCH } from './oklch.ts'
    
    @controller
    class LchControlsElement extends HTMLElement {
        @target lightness : HTMLInputElement
        @target chroma    : HTMLInputElement
        @target hue       : HTMLInputElement

        connectedCallback() {
            this.sendRequestForUpdate()
        }

        sendRequestForPreview() {
            dispatchEvent(new CustomEvent<LCH>('lch-preview', {
                detail: {
                    lightness : parseFloat(this.lightness.value) / 100,
                    chroma    : parseFloat(this.chroma.value),
                    hue       : parseFloat(this.hue.value)
                }
            }))
        }

        sendRequestForUpdate() {
            dispatchEvent(new CustomEvent<LCH>('lch-update', {
                detail: {
                    lightness : parseFloat(this.lightness.value) / 100,
                    chroma    : parseFloat(this.chroma.value),
                    hue       : parseFloat(this.hue.value)
                }
            }))
        }
    }

    @controller
    class ChCanvasElement extends HTMLElement {
        @target canvas : HTMLCanvasElement
        renderPending = false
        
        connectedCallback() {
            addEventListener('lch-preview', (e : CustomEvent<LCH>) => {
                if (this.renderPending) return
                this.renderPending = true
                requestAnimationFrame(() => {
                    this.renderAtQuarterResolution(e.detail.lightness)
                    this.renderPending = false
                })
            })

            addEventListener('lch-update', (e : CustomEvent<LCH>) => {
                if (this.renderPending) return
                this.renderPending = true
                requestAnimationFrame(() => {
                    this.renderAtFullResolution(e.detail.lightness)
                    this.renderPending = false
                })
            })
        }

        renderAtQuarterResolution(lightness: number) {
            const { canvas }           = this
            const { devicePixelRatio } = window
            const { width, height }    = canvas.getBoundingClientRect()
            canvas.width  = width  * devicePixelRatio / 2
            canvas.height = height * devicePixelRatio / 2
            this.render(lightness)
        }

        renderAtFullResolution(lightness: number) {
            const { canvas }           = this
            const { devicePixelRatio } = window
            const { width, height }    = canvas.getBoundingClientRect()
            canvas.width  = width  * devicePixelRatio
            canvas.height = height * devicePixelRatio
            this.render(lightness)
        }

        render(lightness: number) {
            const { canvas }        = this
            const { height, width } = canvas
            
            const context = canvas.getContext('2d')
            const imgData = context.createImageData(width, height)
            const data    = imgData.data
            
            context.clearRect(0, 0, width, height)
            
            console.time(`${ width } x ${ height }`)
            const queue = [ (height / 2) * width + (width / 2) ]
            while (queue.length) {
                const pixelPosition = queue.pop()!
                
                const left = pixelPosition % width
                const top  = Math.floor(pixelPosition / width)

                const x = left - (width / 2)
                const y = -(top - (height / 2))
                
                const a = x / (width * 1.5)
                const b = y / (width * 1.5)
                
                const rgb   = OKLCH.toRGB({ lightness, a, b })
                const index = pixelPosition * 4

                if (rgb === undefined) continue
                
                data[index + 0] = Math.round(rgb.red * 255)
                data[index + 1] = Math.round(rgb.green * 255)
                data[index + 2] = Math.round(rgb.blue * 255)
                data[index + 3] = 255
                
                
                // index accesses into data are to confirm that that the pixel there has not already been painted or queued
                // look left
                if ((left - 1 >= 0) && data[ index - 4 + 3 ] === 0) {
                    data[ index - 4 + 3 ] = 1
                    queue.push((top * width) + (left - 1))
                }

                // look up
                if ((top  - 1 >= 0) && data[ index - (width * 4) + 3 ] === 0) {
                    data[ index - (width * 4) + 3 ] = 1
                    queue.push(((top - 1) * width) + left)
                }

                // look right
                if ((left + 1 <= width - 1) && data[ index + 4 + 3 ] === 0) {
                    data[ index + 4 + 3 ] = 1
                    queue.push((top * width) + (left + 1))
                }

                // look down
                if ((top + 1 <= height - 1) && data[ index + (width * 4) + 3 ] === 0) {
                    data[ index + (width * 4) + 3 ] = 1
                    queue.push(((top + 1) * width) + left)
                }
            }
            console.timeEnd(`${ width } x ${ height }`)

            context.putImageData(imgData, 0, 0)
        }
    }

</script>

<ch-canvas>
    <canvas data-target="ch-canvas.canvas"></canvas>
</ch-canvas>

<lch-controls>
    
    <label for="lightness">Lightness</label>
    <input type="range" id="lightness" name="lightness" data-target="lch-controls.lightness" data-action="input:lch-controls#sendRequestForPreview change:lch-controls#sendRequestForUpdate" min="0" max="100"  value="50"   step="0.1">
    
    <label for="chroma">Chroma</label>
    <input type="range" id="chroma"    name="chroma"    data-target="lch-controls.chroma"    data-action="input:lch-controls#sendRequestForPreview change:lch-controls#sendRequestForUpdate" min="0" max="0.37" value="0.15" step="0.001">
    
    <label for="hue">Hue</label>
    <input type="range" id="hue"       name="hue"       data-target="lch-controls.hue"       data-action="input:lch-controls#sendRequestForPreview change:lch-controls#sendRequestForUpdate" min="0" max="360"  value="90"   step="0.5">

</lch-controls>
